# Adicionando uma frase com o mês correspondente
im_1 <- image_annotate(patrik, "Janeiro", size = 21,
color = "red",
boxcolor = "black",
degrees = 10,
location = "+120+50")
# Adicionando uma frase com o mês correspondente
im_1 <- image_annotate(im_1, "Janeiro", size = 21,
color = "red",
boxcolor = "black",
degrees = 10,
location = "+120+50")
im_1
# Adicionando uma frase com o mês correspondente
im_1 <- image_annotate(im_1, "Janeiro", size = 21,
color = "darkblue",
boxcolor = "black",
degrees = 10,
location = "+120+50")
im_1
# Adicionando uma frase com o mês correspondente
im_1 <- image_annotate(im_1, "Janeiro", size = 21,
color = "darkblue",
degrees = 10,
location = "+120+50")
im_1
im_1
im_1
# Adicionando uma frase com o mês correspondente
im_1 <- image_annotate(im_1, "Janeiro", size = 21,
color = "darkblue",
degrees = 10,
location = "+120+50")
im_1
im_2 <- image_annotate(patrik, "Aqui", size = 21,
color = "darkblue",
degrees = 10,
location = "+120+50")
im_2 <- image_annotate(im_2, "Aqui", size = 21,
color = "darkblue",
degrees = 10,
location = "+120+50")
im_2
im_1
# Adicionando uma frase com o mês correspondente
im_1 <- image_annotate(im_1, "Janeiro", size = 21,
color = "darkblue",
degrees = 10,
location = "+120+50")
im_1
# Adicionando uma frase com o mês correspondente
im_2 <- image_annotate(im_1, "Janeiro", size = 21,
color = "darkblue",
degrees = 10,
location = "+120+50")
im_2
a
# Importando os gráficos do computador
im_1 <- image_read("IMAGENS/GIF/a1.png")
# Adicionando uma frase com o mês correspondente
im_1  image_annotate(im_1, "Janeiro", size = 21,
image_annotate(im_1, "Janeiro", size = 21,
color = "darkblue",
degrees = 10,
location = "+120+50")
image_annotate(im_1, "Janeiro", size = 21,
color = "darkblue",
degrees = 10,
location = "+320+50")
image_annotate(im_1, "Janeiro", size = 21,
color = "darkblue",
degrees = 10,
location = "+420+50")
image_annotate(im_1, "Janeiro", size = 21,
color = "darkblue",
degrees = 10,
location = "+500+50")
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
degrees = 10,
location = "+500+50")
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
degrees = 10,
location = "+500+30")
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
degrees = 3,
location = "+500+30")
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
location = "+500+20")
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
location = "+530+20")
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
location = "+630+20")
_
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
location = "+630+100")
,
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
location = "+630+600")
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
location = "+630+500")
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
location = "+630+400")
image_annotate(im_1, "Janeiro", size = 25,
color = "darkblue",
location = "+630+360")
image_annotate(im_1, "Janeiro", size = 27,
color = "darkblue",
location = "+630+360")
# Adicionando uma frase com o mês correspondente
im_1 <- image_annotate(im_1, "Janeiro", size = 27,
color = "darkblue",
location = "+630+360")
im_2 <- image_annotate(im_2, "Fevereiro", size = 27,
color = "darkblue",
location = "+630+360")
im_4 <- image_annotate(im_4, "Abril", size = 27,
color = "darkblue",
location = "+630+360")
im_4 <- image_annotate(im_4, "Abril", size = 27,
color = "darkblue",
location = "+630+360")
im_5 <- image_annotate(im_5, "Maio", size = 27,
color = "darkblue",
location = "+630+360")
im_8 <- image_annotate(im_8, "Agosto", size = 27,
color = "darkblue",
location = "+630+360")
im_11 <- image_annotate(im_11, "Outubro", size = 27,
color = "darkblue",
location = "+630+360")
# Criando o GIF
img <- c(im_1,im_2,im_3,im_4,im_5,im_6,im_7,im_8,im_9,im_10,im_11)
img <- image_scale(img, "600x600")
img <- image_animate(img, fps = 1)
img
# Importando os gráficos do computador
im_1 <- image_read("IMAGENS/GIF/a1.png")
im_2 <- image_read("IMAGENS/GIF/a2.png")
im_3 <- image_read("IMAGENS/GIF/a3.png")
im_4 <- image_read("IMAGENS/GIF/a4.png")
im_5 <- image_read("IMAGENS/GIF/a5.png")
im_6 <- image_read("IMAGENS/GIF/a6.png")
im_7 <- image_read("IMAGENS/GIF/a7.png")
im_8 <- image_read("IMAGENS/GIF/a8.png")
im_9 <- image_read("IMAGENS/GIF/a9.png")
im_10 <- image_read("IMAGENS/GIF/a10.png")
im_11 <- image_read("IMAGENS/GIF/a11.png")
# Adicionando uma frase com o mês correspondente
im_1 <- image_annotate(im_1, "Janeiro", size = 27,
color = "darkblue",
location = "+630+360")
image_annotate(im_2, "Fevereiro", size = 27,
color = "darkblue",
location = "+630+360")
image_annotate(im_3, "Março", size = 27,
color = "darkblue",
location = "+630+360")
image_annotate(im_4, "Abril", size = 27,
color = "darkblue",
location = "+630+360")
image_annotate(im_5, "Maio", size = 27,
color = "darkblue",
location = "+630+360")
im_2 <- image_annotate(im_2, "Fevereiro", size = 27,
color = "darkblue",
location = "+630+360")
im_4 <- image_annotate(im_4, "Abril", size = 27,
color = "darkblue",
location = "+630+360")
im_5 <- image_annotate(im_5, "Maio", size = 27,
color = "darkblue",
location = "+630+360")
im_8 <- image_annotate(im_8, "Agosto", size = 27,
color = "darkblue",
location = "+630+360")
im_9 <- image_annotate(im_9, "Agosto", size = 27,
color = "darkblue",
location = "+630+360")
im_11 <- image_annotate(im_11, "Outubro", size = 27,
color = "darkblue",
location = "+630+360")
# Criando o GIF
img <- c(im_1,im_2,im_3,im_4,im_5,im_6,im_7,im_8,im_9,im_10,im_11)
img <- image_scale(img, "600x600")
img <- image_animate(img, fps = 1)
img
image_annotate(im_3, "Março", size = 27,
color = "darkblue",
location = "+630+360")
image_annotate(im_5, "Maio", size = 27,
color = "darkblue",
location = "+630+360")
image_annotate(im_6, "Junho", size = 27,
color = "darkblue",
location = "+630+360")
image_annotate(im_7, "Julho", size = 27,
color = "darkblue",
location = "+630+360")
image_annotate(im_8, "Agosto", size = 27,
color = "darkblue",
location = "+630+360")
im_1 <- image_read("IMAGENS/GIF/a1.png")
im_2 <- image_read("IMAGENS/GIF/a2.png")
im_3 <- image_read("IMAGENS/GIF/a3.png")
im_4 <- image_read("IMAGENS/GIF/a4.png")
im_5 <- image_read("IMAGENS/GIF/a5.png")
im_6 <- image_read("IMAGENS/GIF/a6.png")
im_7 <- image_read("IMAGENS/GIF/a7.png")
im_8 <- image_read("IMAGENS/GIF/a8.png")
im_9 <- image_read("IMAGENS/GIF/a9.png")
im_10 <- image_read("IMAGENS/GIF/a10.png")
im_11 <- image_read("IMAGENS/GIF/a11.png")
# Adicionando uma frase com o mês correspondente
im_1 <- image_annotate(im_1, "Janeiro", size = 27,
color = "darkblue",
location = "+630+360")
im_2 <- image_annotate(im_2, "Fevereiro", size = 27,
color = "darkblue",
location = "+630+360")
im_3 <-  image_annotate(im_3, "Março", size = 27,
color = "darkblue",
location = "+630+360")
im_4 <- image_annotate(im_4, "Abril", size = 27,
color = "darkblue",
location = "+630+360")
im_5 <- image_annotate(im_5, "Maio", size = 27,
color = "darkblue",
location = "+630+360")
im_6 <- image_annotate(im_6, "Junho", size = 27,
color = "darkblue",
location = "+630+360")
im_7 <- image_annotate(im_7, "Julho", size = 27,
color = "darkblue",
location = "+630+360")
im_8 <- image_annotate(im_8, "Agosto", size = 27,
color = "darkblue",
location = "+630+360")
im_9 <- image_annotate(im_9, "Setembro", size = 27,
color = "darkblue",
location = "+630+360")
im_10 <- image_annotate(im_10, "Outubro", size = 27,
color = "darkblue",
location = "+630+360")
im_11 <- image_annotate(im_11, "Novembro", size = 27,
color = "darkblue",
location = "+630+360")
# Criando o GIF
img <- c(im_1,im_2,im_3,im_4,im_5,im_6,im_7,im_8,im_9,im_10,im_11)
img <- image_scale(img, "600x600")
img <- image_animate(img, fps = 1)
img
image_write_gif(img, path = "IMAGENS/GIF/GIF.gif")
# É possivel adicionar um delay
image_write_gif(img, path = "IMAGENS/GIF/GIF_delay.gif",
delay = 1/6)
# É possivel adicionar um delay
image_write_gif(img, path = "IMAGENS/GIF/GIF_delay.gif",
delay = 1/2)
---
title: "Tutorial"
author: "Ana Tércia, João, Laura Reis, Leonardo e Paulo"
date: "19 de novembro de 2019"
output:
pdf_document:
keep_tex: true
latex_engine: xelatex
---
getwd()
## 1. INTRODUÇÃO
getwd()
setwd("C:/Users/nick_/OneDrive/Área de Trabalho/image_analysis/Slide")
getwd()
---
title: "Tutorial"
author: "Ana Tércia, João, Laura Reis, Leonardo e Paulo"
date: "19 de novembro de 2019"
output:
pdf_document:
keep_tex: true
latex_engine: xelatex
---
getwd()
## 1. INTRODUÇÃO
getwd()
install.packages("purrr")
library(purrr)
im <- load.example('parrots') %>% imresize(.5)
library(imager)
library(purrr)
im <- load.example('parrots') %>% imresize(.5)
#Divide along x, then y
qsplit <- function(im)
{
imsplit(im,"x",2) %>% map(~ imsplit(.,"y",2)) %>%
flatten
}
qsplit(im) %>% as.imlist %>% plot
qunsplit <- function(l)
{
list(l[1:2],l[3:4]) %>% map(~ imappend(.,"y")) %>% imappend("x")
}
qsplit(im) %>% qunsplit %>% plot
imsd <- function(im)
{
imsplit(im,"c") %>% map_dbl(sd) %>% max
}
refine <- function(l)
{
if (is.cimg(l)) # Nós temos uma folha
{
qs <- qsplit(l) #Split
if (any(dim(l)[1:2] <= 4)) # Quadrantes são muito pequenos
{
qs$sds <- rep(0,4) # Impede refinamentos adicionais
}
else
{
qs$sds <- map_dbl(qs,imsd) # Store std.dev of children
}
qs
}
else # Não é uma folha, explora mais adiante
{
indm <- which.max(l$sds) # Find child with max. std. dev
l[[indm]] <- refine(l[[indm]]) # Refina
l$sds[indm] <- max(l[[indm]]$sds) #Update std. dev
l
}
}
rebuild <- function(l,borders=FALSE)
{
map(l[-5],~ if (is.cimg(.)) meanim(.,borders=borders) else rebuild(.,borders=borders)) %>% qunsplit
}
# Produz uma imagem que é uma média das imagens
# Adiciona bordas (opcional)
meanim <- function(im,borders=FALSE)
{
im <- imsplit(im,"c") %>% map(~ 0*. + mean(.)) %>% imappend("c")
if (borders)
{
im[px.borders(im)] <- 0
}
im
}
# Depois de 200 interações
iter.refine(im,1200) %>% rebuild(borders=F) %>% plot
library(purrr)
require(purrr)
im <- load.example('parrots') %>% imresize(.5)
#Divide along x, then y
qsplit <- function(im)
{
imsplit(im,"x",2) %>% map(~ imsplit(.,"y",2)) %>%
flatten
}
qsplit(im) %>% as.imlist %>% plot
qunsplit <- function(l)
{
list(l[1:2],l[3:4]) %>% map(~ imappend(.,"y")) %>% imappend("x")
}
qsplit(im) %>% qunsplit %>% plot
imsd <- function(im)
{
imsplit(im,"c") %>% map_dbl(sd) %>% max
}
refine <- function(l)
{
if (is.cimg(l)) # Nós temos uma folha
{
qs <- qsplit(l) #Split
if (any(dim(l)[1:2] <= 4)) # Quadrantes são muito pequenos
{
qs$sds <- rep(0,4) # Impede refinamentos adicionais
}
else
{
qs$sds <- map_dbl(qs,imsd) # Store std.dev of children
}
qs
}
else # Não é uma folha, explora mais adiante
{
indm <- which.max(l$sds) # Find child with max. std. dev
l[[indm]] <- refine(l[[indm]]) # Refina
l$sds[indm] <- max(l[[indm]]$sds) #Update std. dev
l
}
}
rebuild <- function(l,borders=FALSE)
{
map(l[-5],~ if (is.cimg(.)) meanim(.,borders=borders) else rebuild(.,borders=borders)) %>% qunsplit
}
# Produz uma imagem que é uma média das imagens
# Adiciona bordas (opcional)
meanim <- function(im,borders=FALSE)
{
im <- imsplit(im,"c") %>% map(~ 0*. + mean(.)) %>% imappend("c")
if (borders)
{
im[px.borders(im)] <- 0
}
im
}
# Depois de 200 interações
iter.refine(im,1200) %>% rebuild(borders=F) %>% plot
iter.refine <- function(im,nIter)
{
for (i in seq_len(nIter)) { im <- refine(im) };
im
}
# Depois de 200 interações
iter.refine(im,1200) %>% rebuild(borders=F) %>% plot
im <- load.image("images.jpg") %>% imresize(.5)
getwd()
im <- load.image("IMAGENS/images.jpg") %>% imresize(.5)
# Divide ao longo de x, depois de y
qsplit <- function(im)
{
imsplit(im,"x",2) %>% map(~ imsplit(.,"y",2)) %>%
flatten
}
qsplit(im) %>% as.imlist %>% plot
qunsplit <- function(l)
{
list(l[1:2],l[3:4]) %>% map(~ imappend(.,"y")) %>% imappend("x")
}
qsplit(im) %>% qunsplit %>% plot
imsd <- function(im)
{
imsplit(im,"c") %>% map_dbl(sd) %>% max
}
refine <- function(l)
{
if (is.cimg(l)) # Nós temos uma folha
{
qs <- qsplit(l) # Separa
if (any(dim(l)[1:2] <= 4)) # Quadrantes são muito pequenos
{
qs$sds <- rep(0,4) # Impede refinamentos adicionais
}
else
{
qs$sds <- map_dbl(qs,imsd)
}
qs
}
else # Não é uma folha, explora mais adiante
{
indm <- which.max(l$sds)
l[[indm]] <- refine(l[[indm]]) # Refina
l$sds[indm] <- max(l[[indm]]$sds)
l
}
}
rebuild <- function(l,borders=FALSE)
{
map(l[-5],~ if (is.cimg(.)) meanim(.,borders=borders) else rebuild(.,borders=borders)) %>% qunsplit
}
# Produz uma imagem que é uma média das imagens
# Adiciona bordas (opcional)
meanim <- function(im,borders=FALSE)
{
im <- imsplit(im,"c") %>% map(~ 0*. + mean(.)) %>% imappend("c")
if (borders)
{
im[px.borders(im)] <- 0
}
im
}
iter.refine <- function(im,nIter)
{
for (i in seq_len(nIter)) { im <- refine(im) };
im
}
# Depois de 200 interações
iter.refine(im,1200) %>% rebuild(borders=F) %>% plot
library(imager)
foto <- load.image("C:/Users/nick_/Downloads/images.jpg")
foto2<- foto %>%  resize(size_x = 80, size_y = 80,
interpolation_type = 1L)
suppressMessages(suppressWarnings(library(imager)))
foto2 <- rowMeans(foto2, dims = 2)
```
# Filtro geométrico primitivo
\small
```{r 10.1, echo=TRUE, message=FALSE, warning=FALSE, paged.print=FALSE}
foto2 %>%
apply(1, rev) %>%
t() %>%
image(col = grey.colors(256), axes = FALSE)
sherk <- image_read("https://cdn.discordapp.com/attachments/570294108439052288/646539216582475789/tenor.gif"
) %>%
image_scale("250x") %>%
image_quantize()
require(magick)
require(dplyr)
sherk <- image_read("https://cdn.discordapp.com/attachments/570294108439052288/646539216582475789/tenor.gif"
) %>%
image_scale("250x") %>%
image_quantize()
sherk
length(sherk)
